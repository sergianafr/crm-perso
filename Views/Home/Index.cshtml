@model DashboardData

@{
    ViewData["Title"] = "Home Page";
}

<style>
    .dashboard-card {
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .dashboard-icon {
        font-size: 40px;
        margin-bottom: 15px;
        color: #5b9bd5; /* Icônes bleues */
    }
    .card-title {
        font-weight: bold;
        font-size: 1.25rem;
    }
    .card-text {
        font-size: 2rem;
        font-weight: 600;
        color: #333;
    }
    .text-success {
        color: orange;
    }
    .text-warning {
        color: magenta;
    }
    .text-info {
        color: #17a2b8;
    }
    .rate{
        color:rgb(250, 208, 92);
    }
</style>

<div class="container py-4">
    <header class="mb-4">
        <h1 class="text-center">Dashboard</h1>
    </header>

    <div class="row g-3">
        <div class="col-md-3">
            <a href="@Url.Action("Rate", "Home")" class="text-decoration-none"> 
                <div class="card dashboard-card h-100">
                    <div class="card-body d-flex flex-column p-3">
                        <div class="text-center mb-3">
                            <i class="fas fa-percent dashboard-icon rate"></i>
                        </div>
                        <h4 class="card-title text-center mb-3">Rate</h4>
                        <div class="text-center mt-auto">
                            <h2 class="card-text mb-2">@Model.Rate %</h2> 
                        </div>
                    </div>
                </div>
            </a>
        </div>
        <!-- Card 1 -->
        <div class="col-md-3">
            <a href="@Url.Action("Customers", "Dashboard")" class="text-decoration-none"> 
                <div class="card dashboard-card h-100">
                    <div class="card-body d-flex flex-column p-3">
                        <div class="text-center mb-3">
                            <i class="fas fa-user dashboard-icon text-info"></i>
                        </div>
                        <h4 class="card-title text-center mb-3">Customers</h4>
                        <div class="text-center mt-auto">
                            <h2 class="card-text mb-2">@Model.NbCustomers</h2> 
                            <p class="card-text-mb-1"><span>Total budget:</span> @Model.TotalBudgetFormat</p>
                            <p class="card-text-mb-0"><span>Total expense:</span> @Model.TotalExpenseFormat</p>
                        </div>
                    </div>
                </div>
            </a>
        </div>

        <!-- Card 2 -->
        <div class="col-md-3">
            <a href="@Url.Action("Leads", "Dashboard")" class="text-decoration-none"> 
                <div class="card dashboard-card h-100">
                    <div class="card-body d-flex flex-column p-3">
                        <div class="text-center mb-3">
                            <i class="fas fa-user-plus dashboard-icon text-warning"></i>
                        </div>
                        <h4 class="card-title text-center mb-3">Leads</h4>
                        <div class="text-center mt-auto">
                            <h2 class="card-text mb-0">@Model.NbLeads</h2>
                            <p class="card-text-mb-10">Total expense: @Model.ExpenseLeadFormat</p>
                        </div>
                    </div>
                </div>
            </a>
        </div>

        <!-- Card 3 -->
        <div class="col-md-3">
            <a href="@Url.Action("Tickets", "Dashboard")" class="text-decoration-none">
                <div class="card dashboard-card h-100">
                    <div class="card-body d-flex flex-column p-3">
                        <div class="text-center mb-3">
                            <i class="fas fa-ticket-alt dashboard-icon text-success"></i>
                        </div>
                        <h4 class="card-title text-center mb-3">Tickets</h4>
                        <div class="text-center mt-auto">
                            <h2 class="card-text mb-0">@Model.NbTickets</h2>
                            <p class="card-text-mb-10">Total expense: @Model.ExpenseTicketFormat</p>
                        </div>
                    </div>
                </div>
            </a>
        </div>
    </div>

    <!-- Graphiques côte à côte -->
    <div class="row mt-4">
        <!-- Graphique des budgets -->
        <div class="col-md-6">
            <div class="card dashboard-card">
                <div class="card-body">
                    <h4 class="card-title text-center">Customer Budgets</h4>
                    <canvas id="customerBudgetChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Graphique des dépenses -->
        <div class="col-md-6">
            <div class="card dashboard-card">
                <div class="card-body">
                    <h4 class="card-title text-center">Customer Expenses</h4>
                    <canvas id="customerExpenseChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Graphique d'évolution des budgets et dépenses -->
    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card dashboard-card">
                <div class="card-body">
                    <h4 class="card-title text-center">Evolution of Budgets and Expenses</h4>
                    <canvas id="evolutionChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment"></script>

<script>
 
    // Récupérer les données du modèle
    var customerBudgets = @Html.Raw(Json.Serialize(Model.CustomerBudget));
    var customerExpenses = @Html.Raw(Json.Serialize(Model.CustomerExpense));
    var evolutionData = @Html.Raw(Json.Serialize(Model.EvolutionByDate));

    // Préparer les données pour les budgets
    var budgetLabels = customerBudgets.map(function(customer) {
        return customer.customerName;
    });

    var budgetData = customerBudgets.map(function(customer) {
        return customer.totalAmount;
    });

    // Préparer les données pour les dépenses
    var expenseLabels = customerExpenses.map(function(customer) {
        return customer.customerName;
    });

    var expenseData = customerExpenses.map(function(customer) {
        return customer.totalAmount;
    });

    // Préparer les données pour l'évolution
    var evolutionLabels = evolutionData.map(function(evo) {
        return new Date(evo.date); // Convertir la date en objet Date
    });


    var evolutionExpenseData = evolutionData.map(function(evo) {
        return evo.amountExpense;
    });

    var evolutionBudgetData = evolutionData.map(function(evo) {
        return evo.amountBudget;
    });

    // Créer le graphique des budgets
    var budgetCtx = document.getElementById('customerBudgetChart').getContext('2d');
    var budgetChart = new Chart(budgetCtx, {
        type: 'bar',
        data: {
            labels: budgetLabels,
            datasets: [{
                label: 'Total Budget',
                data: budgetData,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Créer le graphique des dépenses
    var expenseCtx = document.getElementById('customerExpenseChart').getContext('2d');
    var expenseChart = new Chart(expenseCtx, {
        type: 'bar',
        data: {
            labels: expenseLabels,
            datasets: [{
                label: 'Total Expense',
                data: expenseData,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

var evolutionCtx = document.getElementById('evolutionChart').getContext('2d');
var evolutionChart = new Chart(evolutionCtx, {
    type: 'line',
    data: {
        labels: evolutionLabels,
        datasets: [
            {
                label: 'Expenses',
                data: evolutionExpenseData,
                borderColor: 'rgba(255, 99, 132, 1)', // Red for expenses
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderWidth: 2
            },
            {
                label: 'Budgets',
                data: evolutionBudgetData,
                borderColor: 'rgba(75, 192, 192, 1)', // Blue for budgets
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderWidth: 2
            }
        ]
    },
    options: {
        scales: {
            y: {
                beginAtZero: true
            },
            x: {
                type: 'time', // Use time scale for the X-axis
                time: {
                    unit: 'day', // Display data by day
                    tooltipFormat: 'MMM dd, yyyy HH:mm:ss', // Format for tooltips
                    displayFormats: {
                        day: 'MMM dd, yyyy' // Format for axis labels
                    }
                }
            }
        }
    }
});
</script>