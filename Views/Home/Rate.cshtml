@using crm_perso.Extensions
@{
    ViewData["Title"] = "Rate Configuration";
}
@* @model List<TicketDto> *@
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-md-6 mx-auto">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-white border-bottom">
                    <h2 class="mb-0"><i class="fas fa-percent me-2"></i>@ViewData["Title"]</h2>
                </div>
                <div class="card-body">
                    <form id="rateForm" method="post">
                        <div class="mb-4">
                            <label for="rate" class="form-label fw-bold">Rate alert (%)</label>
                            <div class="input-group">
                                <input type="number" step="0.01" class="form-control" id="rate" name="rate" 
                                       required min="0" max="100" placeholder="Ex: 5.25 for 5.25%">
                                <span class="input-group-text">%</span>
                            </div>
                            <div class="form-text text-muted">Rate must be between 0%-100%</div>
                            <div class="invalid-feedback" id="rateFeedback">
                                Rate must be between 0%-100%
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-1"></i> Save
                        </button>
                    </form>
                    <div id="message" class="alert mt-4" style="display: none;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Notification -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto" id="toastTitle">Notification</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage"></div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize toast
            const toastLiveExample = document.getElementById('liveToast');
            const toast = new bootstrap.Toast(toastLiveExample);
            
            function showToast(title, message, isSuccess = true) {
                @* $('#toastTitle').text(title);
                $('#toastMessage').text(message);
                $('.toast-header').removeClass('bg-success bg-danger');
                
                if (isSuccess) {
                    $('.toast-header').addClass('bg-success text-white');
                } else {
                    $('.toast-header').addClass('bg-danger text-white');
                }
                
                toast.show(); *@
            }

            // Form validation
            $('#rateForm').on('submit', function(event) {
                event.preventDefault();
                const currentUserId = @Json.Serialize(Context.Session.GetObject<UserWRole>("CurrentUser")?.id);
                
                const rateInput = $('#rate');
                const rate = parseFloat(rateInput.val());
                const messageDiv = $('#message');
                
                // Reset UI
                messageDiv.hide().removeClass('alert-success alert-danger');
                rateInput.removeClass('is-invalid');
                
                // Client-side validation
                if (isNaN(rate) || rate < 0 || rate > 100) {
                    rateInput.addClass('is-invalid');
                    showToast('Erreur', 'Le taux doit être compris entre 0% et 100%', false);
                    return;
                }

                // API call
                fetch('http://localhost:8080/api/rate/save', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({ rate: rate, idUser:currentUserId })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        showToast('Success', 'Rate alert updated!');
                        messageDiv.text('Rate alert updated!')
                                 .addClass('alert-success')
                                 .fadeIn();
                    } else {
                        throw new Error(data.message || 'Erreur inconnue');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Erreur', error.message || 'Échec de l\'enregistrement', false);
                    messageDiv.text(error.message || 'Échec de l\'enregistrement du taux')
                             .addClass('alert-danger')
                             .fadeIn();
                });
            });

            // Real-time validation
            $('#rate').on('input', function() {
                const value = parseFloat($(this).val());
                
                if (!isNaN(value) && (value < 0 || value > 100)) {
                    $(this).addClass('is-invalid');
                } else {
                    $(this).removeClass('is-invalid');
                }
            });
        });
    </script>

    <style>
        .card {
            border-radius: 8px;
        }
        
        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .input-group-text {
            background-color: #e9ecef;
        }
        
        .invalid-feedback {
            display: none;
            color: #dc3545;
        }
        
        .is-invalid {
            border-color: #dc3545;
        }
        
        .is-invalid ~ .invalid-feedback {
            display: block;
        }
        
        .toast {
            min-width: 300px;
        }
    </style>
}